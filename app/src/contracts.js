
// !!! this is autogenerated by a setup script. Changes will be overwritten !!! 
export class Contracts {
    address = '0x4d2795b1a37913fc4bfe2f4605d4c77b593dfce8'
    Election = {
    "code": "606060408190526000805460a060020a60ff02191681556004556112c73881900390819083398101604052805101600080546c0100000000000000000000000033810204600160a060020a031990911617815581516001805492819052916020601f60026000198487161561010002019093169290920482018190047fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6908101939290918601908390106100e757805160ff19168380011785555b506100d69291505b8082111561011757600081556001016100c2565b5050506111ac8061011b6000396000f35b828001600101855582156100ba579182015b828111156100ba5782518260005055916020019190600101906100f9565b509056606060405236156100e55760e060020a6000350463037a417c81146100ea57806306fdde03146101045780630e5356ec14610168578063165c4a16146101f55780632df9feaa1461020657806333e2df5d146102285780633477ee2e1461027d57806344e4d226146102a5578063462e91ec146102fa5780635bf5d54c1461036457806362d73eb81461037d5780637736d7351461039d5780637a4c96ad146103ab5780638b67430e1461047a578063bed34bba146104b3578063c174758514610546578063da58c7d914610553578063de2927891461059c578063f851a440146105dc575b610002565b346100025760035b60408051918252519081900360200190f35b34610002576105f360018054604080516020601f600260001961010087891615020190951694909404938401819004810282018101909252828152929190830182828015610a245780601f106109f957610100808354040283529160200191610a24565b34610002576106616040805160018152905160008051602061118c8339815191529181900360200190a1604080516020808252600e908201527f74686973206973206120746573740000000000000000000000000000000000008183015290517f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f509181900360600190a15b565b3461000257602435600435026100f2565b346100025761066160005460ff60a060020a90910416600114610a2c57610002565b34610002576106636004808035906020019082018035906020019191908080601f0160208091040260200160405190810160405280939291908181526020018383808284375094965061067c95505050505050565b3461000257610684600435600280548290811015610002576000918252602090912001905081565b34610002576106636004808035906020019082018035906020019191908080601f0160208091040260200160405190810160405280939291908181526020018383808284375094965061071395505050505050565b34610002576106616004808035906020019082018035906020019191908080601f0160208091040260200160405190810160405280939291908181526020018383808284375094965050505050505060005433600160a060020a03908116911614610a8557610002565b34610002576100f260005460ff60a060020a9091041681565b346100025761066160005460ff60a060020a9091041615610cce57610002565b34610002576100f260045481565b34610002576100f26004808035906020019082018035906020019191908080601f01602080910402602001604051908101604052809392919081815260200183838082843750506040805160208835808b0135601f810183900483028401830190945283835297999860449892975091909101945090925082915084018382808284375094965050933593505050506000805460ff60a060020a9091041660011461070e576040805160638152905160008051602061118c8339815191529181900360200190a1506063610dae565b34610002576100f26004355b6000600360005082815481101561000257906000526020600020906004020160005060030154905061067f565b34610002576100f26004808035906020019082018035906020019191908080601f01602080910402602001604051908101604052809392919081815260200183838082843750506040805160208835808b0135601f81018390048302840183019094528383529799986044989297509190910194509092508291508401838280828437509496506107d895505050505050565b34610002576106616101f3565b346100025761087860043560038054829081101561000257906000526020600020906004020160005080546003820154600160a060020a03909116925060018201916002019084565b3461000257604080516020808201835260008083528351918201909352828152825461099393908190600260a060020a90910460ff161461113557610002565b34610002576109dd600054600160a060020a031681565b60405180806020018281038252838181518152602001915080519060200190808383829060006004602084601f0104600302600f01f150905090810190601f1680156106535780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b005b604080519115158252519081900360200190f35b610de4845b60015b919050565b6040805160208082528354600260001961010060018416150201909116049082018190529091829190820190849080156106ff5780601f106106d4576101008083540402835291602001916106ff565b820191906000526020600020905b8154815290600101906020018083116106e257829003601f168201915b50509250505060405180910390f35b610db5845b6000805b60035460ff82161015610a6357610a6e60036000508260ff16815481101561000257600091825260209182902060016004909202018101805460408051600294831615610100026000190190921693909304601f8101859004850282018501909352828152929091908301828280156107d15780601f106107a6576101008083540402835291602001916107d1565b820191906000526020600020905b8154815290600101906020018083116107b457829003601f168201915b5050505050845b6040805160208181018352600091829052825190810190925290819052825182518491849184908290101561080c57825191505b5060005b8181101561109857828181518110156100025790602001015160f860020a900460f860020a02600160f860020a031916848281518110156100025790602001015160f860020a900460f860020a02600160f860020a03191610156110ac57600019945061112b565b60408051600160a060020a038616815260608101839052608060208201818152865460026000196101006001841615020190911604918301829052919283019060a08401908790801561090c5780601f106108e15761010080835404028352916020019161090c565b820191906000526020600020905b8154815290600101906020018083116108ef57829003601f168201915b50508381038252855460026000196101006001841615020190911604808252602090910190869080156109805780601f1061095557610100808354040283529160200191610980565b820191906000526020600020905b81548152906001019060200180831161096357829003601f168201915b5050965050505050505060405180910390f35b60405180806020018281038252838181518152602001915080519060200190602002808383829060006004602084601f0104600302600f01f1509050019250505060405180910390f35b60408051600160a060020a039092168252519081900360200190f35b820191906000526020600020905b815481529060010190602001808311610a0757829003601f168201915b505050505081565b6000805474ff0000000000000000000000000000000000000000191674020000000000000000000000000000000000000000179055565b600091505b50919050565b1515610a7d5760019150610a68565b600101610717565b60028054600181018083558281838015829011610ab357600083815260209020610ab3918101908301610b2d565b505050600092835260208084206040805180840190915286815286519190940180548187529583902093959093849360026001841615610100026000190190931692909204601f90810183900482019392890190839010610b9557805160ff19168380011785555b50610bc5929150610b7d565b50506001015b80821115610b9157600060008201600050805460018160011615610100020316600290046000825580601f10610b635750610b27565b601f016020900490600052602060002090810190610b2791905b80821115610b915760008155600101610b7d565b5090565b82800160010185558215610b1b579182015b82811115610b1b578251826000505591602001919060010190610ba7565b5050604080516020808252600f908201527f63616e64696461746520616464656400000000000000000000000000000000008183015290517f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f5094509081900360600192509050a17fd75d9d15be8ae8b5e0fe44393dbc904cab9225a45bc8a8bcedf6074dd9151eb48160026000508054905060405180806020018381526020018281038252848181518152602001915080519060200190808383829060006004602084601f0104600302600f01f150905090810190601f168015610cbd5780820380516001836020036101000a031916815260200191505b50935050505060405180910390a150565b6000805474ff0000000000000000000000000000000000000000191660a060020a179055565b5050606091820151600391820155600480546001018082556040805160208082018490528282528b51928201929092528a517fa7a2d63bd1f87ffea418b9b849b6a1269324f00cd20483c847eab567ab3c0cfa97508b969395919485948501938089019383928692849287926000929091600f601f8701929092040201f150905090810190601f168015610d9c5780820380516001836020036101000a031916815260200191505b50935050505060405180910390a15060005b9392505050565b15610677576040805160028152905160008051602061118c8339815191529181900360200190a1506002610dae565b1515610e14576040805160038152905160008051602061118c8339815191529181900360200190a1506003610dae565b60038054600181018083558281838015829011610e4a57600402816004028360005260206000209182019101610e4a9190610f20565b50505091909060005260206000209060040201600050604080516080810182523380825260208083018a90529282018890526060820187905283546c010000000000000000000000009182029190910473ffffffffffffffffffffffffffffffffffffffff1990911617835587516001808501805460008281528690209496959194601f600260001995841615610100029590950190921693909304810182900483019392918c0190839010610fd957805160ff19168380011785555b50611009929150610b7d565b5050600060038201556004015b80821115610b9157805473ffffffffffffffffffffffffffffffffffffffff1916815560018082018054600080835592600260001991831615610100029190910190911604601f819010610f9d57505b5060028201600050805460018160011615610100020316600290046000825580601f10610fbb5750610f13565b601f016020900490600052602060002090810190610f709190610b7d565b601f016020900490600052602060002090810190610f139190610b7d565b82800160010185558215610f07579182015b82811115610f07578251826000505591602001919060010190610feb565b50506040820151816002016000509080519060200190828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061106857805160ff19168380011785555b50610cf4929150610b7d565b8280016001018555821561105c579182015b8281111561105c57825182600050559160200191906001019061107a565b82518451101561111357600019945061112b565b828181518110156100025790602001015160f860020a900460f860020a02600160f860020a031916848281518110156100025790602001015160f860020a900460f860020a02600160f860020a031916111561110b576001945061112b565b600101610810565b825184511115611126576001945061112b565b600094505b5050505092915050565b600091505b60035460ff831610156111535761115b8260ff16610486565b509092915050565b905060008110611181578281815181101561000257602090810290910101805160010190525b60019091019061113a56b48fb6cf86d9c47e2268650bac422c18104332e413943278776f488788b991da",
    "info": {
        "source": "pragma solidity ^0.4.4;\n\n/*\nERROR CODES\n\nError 1 = NO_PERMISSION\nError 2 = ALREADY_VOTED\nError 3 = INVALID_TOKEN\nError 99 = WRONG_STAGE\n*/\n\ncontract Election {\n\n// ############## EVENTS ##############\n\n    event error(uint);\n    event log(string);\n    event voteEvent(string, uint);\n    event candidateAdded(string, uint);\n\n// ############## STRUCTS ##############\n\n    struct Candidate {\n        string name;\n    }\n    \n    struct Voter {\n        address addr;\n        string token;\n        string vote;\n        uint candidateId;\n    }\n\n    enum Stage {\n        PRE_VOTING,\n        VOTING,\n        POST_VOTING\n    }\n\n// ############## FIELDS ##############\n\n    // contract owner becomes admin\n    address public admin;\n    Stage public currentStage = Stage.PRE_VOTING;\n\n    // name of the election, e.g. \"BP 2016\"\n    string public name;\n    Candidate[] public candidates;\n    \n    Voter[] public voters;\n    uint public nrVotes = 0;\n\n\n// ############## PUBLIC FUNCTIONS ##############\n\n// TODO: add constant keyword to readonly functions. Remove return from write functions\n\n    // Constructor of the contract\n    function Election(string _name) {\n        admin = msg.sender;\n        name = _name;\n    }\n\n    // TODO: add modifier prevoting\n    function addCandidate(string _name) requiresAdmin {\n        candidates.push(Candidate({\n            name: _name\n        }));\n        log(\"candidate added\");\n        candidateAdded(_name, candidates.length);\n    }\n\n    function startElection() preVoting {\n        currentStage = Stage.VOTING;\n    }\n\n    function stopElection() voting {\n        currentStage = Stage.POST_VOTING;\n    }\n    \n    function vote(string _token, string _vote, uint _candidateId) returns(uint) {\n        if(currentStage != Stage.VOTING) { error(99); return 99; } // WRONG_STAGE\n        if(alreadyVoted(_token)) { error(2); return 2; } // ALREADY_VOTED\n        if(! isTokenValid(_token)) { error(3); return 3; } // INVALID_TOKEN\n\n        // check vote validity\n\n        voters.push(Voter({\n            addr: msg.sender,\n            token: _token,\n            vote: _vote,\n            candidateId: _candidateId\n        }));\n        nrVotes++;\n        voteEvent(_token, nrVotes);\n        return 0;\n    }\n\n    function getResult() postVoting returns(uint[]) {\n        uint[] memory votes;\n        for(var i=0; i<voters.length; i++) {\n            var candidateIndex = voteToCandidateIndex(i);\n            if(candidateIndex >= 0) {\n                votes[candidateIndex]++;\n            }\n        }\n        return votes;\n    }\n\n// ############## MODIFIERS ##############\n\nmodifier requiresAdmin {\n    if(msg.sender != admin) throw;\n    _;\n}\n\nmodifier preVoting {\n    if(currentStage != Stage.PRE_VOTING) throw;\n    _;\n}\n\nmodifier voting {\n    if(currentStage != Stage.VOTING) throw;\n    _;\n}\n\nmodifier postVoting {\n    if(currentStage != Stage.POST_VOTING) throw;\n    _;\n}\n\n// ############## PRIVATE FUNCTIONS ##############\n\n    function alreadyVoted(string _token) returns(bool) {\n        for(var i=0; i<voters.length; i++) {\n            if(compareStrings(voters[i].token, _token) == 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    // checks if the token is valid and signed by the election registrar\n    // TODO: implement (see https://gist.github.com/axic/5b33912c6f61ae6fd96d6c4a47afde6d)\n    function isTokenValid(string _token) returns (bool) {\n        return true;\n    }\n\n    function voteToCandidateIndex(uint _voterId) returns(uint) {\n        return voters[_voterId].candidateId;\n    }\n\n    // from https://raw.githubusercontent.com/ethereum/dapp-bin/master/library/stringUtils.sol\n    function compareStrings(string _a, string _b) returns (int) {\n        bytes memory a = bytes(_a);\n        bytes memory b = bytes(_b);\n        uint minLength = a.length;\n        if (b.length < minLength) minLength = b.length;\n        //@todo unroll the loop into increments of 32 and do full 32 byte comparisons\n        for (uint i = 0; i < minLength; i ++)\n            if (a[i] < b[i])\n                return -1;\n            else if (a[i] > b[i])\n                return 1;\n        if (a.length < b.length)\n            return -1;\n        else if (a.length > b.length)\n            return 1;\n        else\n            return 0;\n    }\n\n// ############## TESTS ###############\n\n    function testFunc() returns (uint) {\n        return 3;\n    }\n\n    function multiply(uint _n1, uint _n2) returns (uint) {\n        return _n1 * _n2;\n    }\n\n\n    function testEvents() {\n        error(1);\n        log(\"this is a test\");\n    }\n\n    function testEvent2() {\n\n    }\n}\n",
        "language": "Solidity",
        "languageVersion": "0",
        "compilerVersion": "0.4.4+commit.4633f3de.Emscripten.clang",
        "abiDefinition": [
            {
                "constant": false,
                "inputs": [],
                "name": "testFunc",
                "outputs": [
                    {
                        "name": "",
                        "type": "uint256"
                    }
                ],
                "payable": false,
                "type": "function"
            },
            {
                "constant": true,
                "inputs": [],
                "name": "name",
                "outputs": [
                    {
                        "name": "",
                        "type": "string"
                    }
                ],
                "payable": false,
                "type": "function"
            },
            {
                "constant": false,
                "inputs": [],
                "name": "testEvents",
                "outputs": [],
                "payable": false,
                "type": "function"
            },
            {
                "constant": false,
                "inputs": [
                    {
                        "name": "_n1",
                        "type": "uint256"
                    },
                    {
                        "name": "_n2",
                        "type": "uint256"
                    }
                ],
                "name": "multiply",
                "outputs": [
                    {
                        "name": "",
                        "type": "uint256"
                    }
                ],
                "payable": false,
                "type": "function"
            },
            {
                "constant": false,
                "inputs": [],
                "name": "stopElection",
                "outputs": [],
                "payable": false,
                "type": "function"
            },
            {
                "constant": false,
                "inputs": [
                    {
                        "name": "_token",
                        "type": "string"
                    }
                ],
                "name": "isTokenValid",
                "outputs": [
                    {
                        "name": "",
                        "type": "bool"
                    }
                ],
                "payable": false,
                "type": "function"
            },
            {
                "constant": true,
                "inputs": [
                    {
                        "name": "",
                        "type": "uint256"
                    }
                ],
                "name": "candidates",
                "outputs": [
                    {
                        "name": "name",
                        "type": "string"
                    }
                ],
                "payable": false,
                "type": "function"
            },
            {
                "constant": false,
                "inputs": [
                    {
                        "name": "_token",
                        "type": "string"
                    }
                ],
                "name": "alreadyVoted",
                "outputs": [
                    {
                        "name": "",
                        "type": "bool"
                    }
                ],
                "payable": false,
                "type": "function"
            },
            {
                "constant": false,
                "inputs": [
                    {
                        "name": "_name",
                        "type": "string"
                    }
                ],
                "name": "addCandidate",
                "outputs": [],
                "payable": false,
                "type": "function"
            },
            {
                "constant": true,
                "inputs": [],
                "name": "currentStage",
                "outputs": [
                    {
                        "name": "",
                        "type": "uint8"
                    }
                ],
                "payable": false,
                "type": "function"
            },
            {
                "constant": false,
                "inputs": [],
                "name": "startElection",
                "outputs": [],
                "payable": false,
                "type": "function"
            },
            {
                "constant": true,
                "inputs": [],
                "name": "nrVotes",
                "outputs": [
                    {
                        "name": "",
                        "type": "uint256"
                    }
                ],
                "payable": false,
                "type": "function"
            },
            {
                "constant": false,
                "inputs": [
                    {
                        "name": "_token",
                        "type": "string"
                    },
                    {
                        "name": "_vote",
                        "type": "string"
                    },
                    {
                        "name": "_candidateId",
                        "type": "uint256"
                    }
                ],
                "name": "vote",
                "outputs": [
                    {
                        "name": "",
                        "type": "uint256"
                    }
                ],
                "payable": false,
                "type": "function"
            },
            {
                "constant": false,
                "inputs": [
                    {
                        "name": "_voterId",
                        "type": "uint256"
                    }
                ],
                "name": "voteToCandidateIndex",
                "outputs": [
                    {
                        "name": "",
                        "type": "uint256"
                    }
                ],
                "payable": false,
                "type": "function"
            },
            {
                "constant": false,
                "inputs": [
                    {
                        "name": "_a",
                        "type": "string"
                    },
                    {
                        "name": "_b",
                        "type": "string"
                    }
                ],
                "name": "compareStrings",
                "outputs": [
                    {
                        "name": "",
                        "type": "int256"
                    }
                ],
                "payable": false,
                "type": "function"
            },
            {
                "constant": false,
                "inputs": [],
                "name": "testEvent2",
                "outputs": [],
                "payable": false,
                "type": "function"
            },
            {
                "constant": true,
                "inputs": [
                    {
                        "name": "",
                        "type": "uint256"
                    }
                ],
                "name": "voters",
                "outputs": [
                    {
                        "name": "addr",
                        "type": "address"
                    },
                    {
                        "name": "token",
                        "type": "string"
                    },
                    {
                        "name": "vote",
                        "type": "string"
                    },
                    {
                        "name": "candidateId",
                        "type": "uint256"
                    }
                ],
                "payable": false,
                "type": "function"
            },
            {
                "constant": false,
                "inputs": [],
                "name": "getResult",
                "outputs": [
                    {
                        "name": "",
                        "type": "uint256[]"
                    }
                ],
                "payable": false,
                "type": "function"
            },
            {
                "constant": true,
                "inputs": [],
                "name": "admin",
                "outputs": [
                    {
                        "name": "",
                        "type": "address"
                    }
                ],
                "payable": false,
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "name": "_name",
                        "type": "string"
                    }
                ],
                "type": "constructor"
            },
            {
                "anonymous": false,
                "inputs": [
                    {
                        "indexed": false,
                        "name": "",
                        "type": "uint256"
                    }
                ],
                "name": "error",
                "type": "event"
            },
            {
                "anonymous": false,
                "inputs": [
                    {
                        "indexed": false,
                        "name": "",
                        "type": "string"
                    }
                ],
                "name": "log",
                "type": "event"
            },
            {
                "anonymous": false,
                "inputs": [
                    {
                        "indexed": false,
                        "name": "",
                        "type": "string"
                    },
                    {
                        "indexed": false,
                        "name": "",
                        "type": "uint256"
                    }
                ],
                "name": "voteEvent",
                "type": "event"
            },
            {
                "anonymous": false,
                "inputs": [
                    {
                        "indexed": false,
                        "name": "",
                        "type": "string"
                    },
                    {
                        "indexed": false,
                        "name": "",
                        "type": "uint256"
                    }
                ],
                "name": "candidateAdded",
                "type": "event"
            }
        ],
        "userDoc": {
            "methods": {}
        },
        "developerDoc": {
            "methods": {}
        }
    }
}
}
