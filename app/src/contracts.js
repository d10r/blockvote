
// !!! this is autogenerated by a setup script. Changes will be overwritten !!! 
export class Contracts {
       address = "0xca34082c01d5116084d720efe27710f6b9806f21"
    Election = {
    "code": "6000805460a060020a60ff021916815560048190556080604081905260608290526005805492819052905160ff191681559061008d907f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db0602060026101006001851615026000190190931692909204601f01919091048101905b808211156100fa5760008155600101610079565b5050604080516020808201928390526000918290526006805492819052925160ff191683556100fe91601f6002600019610100600185161502019092169190910401047ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f90810190610079565b5090565b50506040516115fb3803806115fb83398101604052808051820191906020015050600080546c0100000000000000000000000033810204600160a060020a031990911617815581516001805492819052916020601f60026000198487161561010002019093169290920482018190047fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6908101939290918601908390106101b857805160ff19168380011785555b506101e8929150610079565b828001600101855582156101ac579182015b828111156101ac5782518260005055916020019190600101906101ca565b505050611402806101f96000396000f3606060405236156100fb5760e060020a6000350463037a417c811461010057806306fdde031461011a5780630e5356ec1461017e578063165c4a161461020b5780632df9feaa1461021c57806333e2df5d1461023e5780633477ee2e1461029357806344e4d226146102bb578063462e91ec1461031057806349da5a0f1461037a5780635bf5d54c146103df57806362d73eb8146103f857806365372147146104185780637736d7351461047d5780637a4c96ad1461048b5780638932dc3d1461055a5780638b67430e14610602578063bed34bba1461063a578063c1747585146106cd578063da58c7d9146106da578063f851a44014610723575b610002565b346100025760035b60408051918252519081900360200190f35b346100025761073a60018054604080516020601f600260001961010087891615020190951694909404938401819004810282018101909252828152929190830182828015610b215780601f10610af657610100808354040283529160200191610b21565b34610002576107a8604080516001815290516000805160206113e28339815191529181900360200190a1604080516020808252600e908201527f74686973206973206120746573740000000000000000000000000000000000008183015290517f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f509181900360600190a15b565b346100025760243560043502610108565b34610002576107a860005460ff60a060020a90910416600114610b2957610002565b34610002576107aa6004808035906020019082018035906020019191908080601f016020809104026020016040519081016040528093929190818152602001838380828437509496506107c395505050505050565b34610002576107cb600435600280548290811015610002576000918252602090912001905081565b34610002576107aa6004808035906020019082018035906020019191908080601f0160208091040260200160405190810160405280939291908181526020018383808284375094965061085a95505050505050565b34610002576107a86004808035906020019082018035906020019191908080601f0160208091040260200160405190810160405280939291908181526020018383808284375094965050505050505060005433600160a060020a03908116911614610b7457610002565b346100025761073a60068054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152929190830182828015610b215780601f10610af657610100808354040283529160200191610b21565b346100025761010860005460ff60a060020a9091041681565b34610002576107a860005460ff60a060020a9091041615610dbd57610002565b346100025761073a60058054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152929190830182828015610b215780601f10610af657610100808354040283529160200191610b21565b346100025761010860045481565b34610002576101086004808035906020019082018035906020019191908080601f01602080910402602001604051908101604052809392919081815260200183838082843750506040805160208835808b0135601f810183900483028401830190945283835297999860449892975091909101945090925082915084018382808284375094965050933593505050506000805460ff60a060020a9091041660011461085557604080516063815290516000805160206113e28339815191529181900360200190a1506063610e8f565b34610002576107a86004808035906020019082018035906020019191908080601f01602080910402602001604051908101604052809392919081815260200183838082843750506040805160208835808b0135601f810183900483028401830190945283835297999860449892975091909101945090925082915084018382808284375094965050505050505060005433600160a060020a0390811691161461117957610002565b3461000257610108600435600060036000508281548110156100025790600052602060002090600402016000506003015490506107c6565b34610002576101086004808035906020019082018035906020019191908080601f01602080910402602001604051908101604052809392919081815260200183838082843750506040805160208835808b0135601f810183900483028401830190945283835297999860449892975091909101945090925082915084018382808284375094965061091f95505050505050565b34610002576107a8610209565b34610002576109bf60043560038054829081101561000257906000526020600020906004020160005080546003820154600160a060020a03909116925060018201916002019084565b3461000257610ada600054600160a060020a031681565b60405180806020018281038252838181518152602001915080519060200190808383829060006004602084601f0104600302600f01f150905090810190601f16801561079a5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b005b604080519115158252519081900360200190f35b610ec5845b60015b919050565b6040805160208082528354600260001961010060018416150201909116049082018190529091829190820190849080156108465780601f1061081b57610100808354040283529160200191610846565b820191906000526020600020905b81548152906001019060200180831161082957829003601f168201915b50509250505060405180910390f35b610e96845b6000805b60035460ff82161015610b5257610b5d60036000508260ff16815481101561000257600091825260209182902060016004909202018101805460408051600294831615610100026000190190921693909304601f8101859004850282018501909352828152929091908301828280156109185780601f106108ed57610100808354040283529160200191610918565b820191906000526020600020905b8154815290600101906020018083116108fb57829003601f168201915b5050505050845b6040805160208181018352600091829052825190810190925290819052825182518491849184908290101561095357825191505b5060005b8181101561134557828181518110156100025790602001015160f860020a900460f860020a02600160f860020a031916848281518110156100025790602001015160f860020a900460f860020a02600160f860020a03191610156113595760001994506113d8565b60408051600160a060020a038616815260608101839052608060208201818152865460026000196101006001841615020190911604918301829052919283019060a084019087908015610a535780601f10610a2857610100808354040283529160200191610a53565b820191906000526020600020905b815481529060010190602001808311610a3657829003601f168201915b5050838103825285546002600019610100600184161502019091160480825260209091019086908015610ac75780601f10610a9c57610100808354040283529160200191610ac7565b820191906000526020600020905b815481529060010190602001808311610aaa57829003601f168201915b5050965050505050505060405180910390f35b60408051600160a060020a039092168252519081900360200190f35b820191906000526020600020905b815481529060010190602001808311610b0457829003601f168201915b505050505081565b6000805460a060020a60ff02191674020000000000000000000000000000000000000000179055565b600091505b50919050565b1515610b6c5760019150610b57565b60010161085e565b60028054600181018083558281838015829011610ba257600083815260209020610ba2918101908301610c1c565b505050600092835260208084206040805180840190915286815286519190940180548187529583902093959093849360026001841615610100026000190190931692909204601f90810183900482019392890190839010610c8457805160ff19168380011785555b50610cb4929150610c6c565b50506001015b80821115610c8057600060008201600050805460018160011615610100020316600290046000825580601f10610c525750610c16565b601f016020900490600052602060002090810190610c1691905b80821115610c805760008155600101610c6c565b5090565b82800160010185558215610c0a579182015b82811115610c0a578251826000505591602001919060010190610c96565b5050604080516020808252600f908201527f63616e64696461746520616464656400000000000000000000000000000000008183015290517f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f5094509081900360600192509050a17fd75d9d15be8ae8b5e0fe44393dbc904cab9225a45bc8a8bcedf6074dd9151eb48160026000508054905060405180806020018381526020018281038252848181518152602001915080519060200190808383829060006004602084601f0104600302600f01f150905090810190601f168015610dac5780820380516001836020036101000a031916815260200191505b50935050505060405180910390a150565b6000805460a060020a60ff02191660a060020a179055565b5050606091820151600391820155600480546001018082556040805160208082018490528282528b51928201929092528a517fa7a2d63bd1f87ffea418b9b849b6a1269324f00cd20483c847eab567ab3c0cfa97508b969395919485948501938089019383928692849287926000929091600f601f8701929092040201f150905090810190601f168015610e7d5780820380516001836020036101000a031916815260200191505b50935050505060405180910390a15060005b9392505050565b156107be57604080516002815290516000805160206113e28339815191529181900360200190a1506002610e8f565b1515610ef557604080516003815290516000805160206113e28339815191529181900360200190a1506003610e8f565b60038054600181018083558281838015829011610f2b57600402816004028360005260206000209182019101610f2b9190611001565b50505091909060005260206000209060040201600050604080516080810182523380825260208083018a90529282018890526060820187905283546c010000000000000000000000009182029190910473ffffffffffffffffffffffffffffffffffffffff1990911617835587516001808501805460008281528690209496959194601f600260001995841615610100029590950190921693909304810182900483019392918c01908390106110ba57805160ff19168380011785555b506110ea929150610c6c565b5050600060038201556004015b80821115610c8057805473ffffffffffffffffffffffffffffffffffffffff1916815560018082018054600080835592600260001991831615610100029190910190911604601f81901061107e57505b5060028201600050805460018160011615610100020316600290046000825580601f1061109c5750610ff4565b601f0160209004906000526020600020908101906110519190610c6c565b601f016020900490600052602060002090810190610ff49190610c6c565b82800160010185558215610fe8579182015b82811115610fe85782518260005055916020019190600101906110cc565b50506040820151816002016000509080519060200190828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061114957805160ff19168380011785555b50610dd5929150610c6c565b8280016001018555821561113d579182015b8281111561113d57825182600050559160200191906001019061115b565b8160056000509080519060200190828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106111d057805160ff19168380011785555b50611200929150610c6c565b828001600101855582156111c4579182015b828111156111c45782518260005055916020019190600101906111e2565b50508060066000509080519060200190828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061125957805160ff19168380011785555b50611289929150610c6c565b8280016001018555821561124d579182015b8281111561124d57825182600050559160200191906001019061126b565b50507f315467641f31e984f2c98145b0eaa664b1ee32c9d04af80e96fc70d7ea5ed1b38260405180806020018281038252838181518152602001915080519060200190808383829060006004602084601f0104600302600f01f150905090810190601f16801561130d5780820380516001836020036101000a031916815260200191505b509250505060405180910390a150506000805460a060020a60ff02191674030000000000000000000000000000000000000000179055565b8251845110156113c05760001994506113d8565b828181518110156100025790602001015160f860020a900460f860020a02600160f860020a031916848281518110156100025790602001015160f860020a900460f860020a02600160f860020a03191611156113b857600194506113d8565b600101610957565b8251845111156113d357600194506113d8565b600094505b505050509291505056b48fb6cf86d9c47e2268650bac422c18104332e413943278776f488788b991da",
    "info": {
        "source": "pragma solidity ^0.4.4;\n\n/*\nERROR CODES\n\nError 1 = NO_PERMISSION\nError 2 = ALREADY_VOTED\nError 3 = INVALID_TOKEN\nError 99 = WRONG_STAGE\n*/\n\ncontract Election {\n\n// ############## EVENTS ##############\n\n    event error(uint);\n    event log(string);\n    event voteEvent(string, uint);\n    event candidateAdded(string, uint);\n    event resultPublished(string);\n\n// ############## STRUCTS ##############\n\n    struct Candidate {\n        string name;\n    }\n    \n    struct Voter {\n        address addr;\n        string token;\n        string vote;\n        uint candidateId;\n    }\n\n    enum Stage {\n        PRE_VOTING,\n        VOTING,\n        PROCESSING,\n        RESULT\n    }\n\n// ############## FIELDS ##############\n\n    // contract owner becomes admin\n    address public admin;\n    Stage public currentStage = Stage.PRE_VOTING;\n\n    // name of the election, e.g. \"BP 2016\"\n    string public name;\n    Candidate[] public candidates;\n    \n    Voter[] public voters;\n    uint public nrVotes = 0;\n\n    string public result = \"\";\n    string public privateKey = \"\";\n\n// ############## PUBLIC FUNCTIONS ##############\n\n// TODO: add constant keyword to readonly functions. Remove return from write functions\n\n    // Constructor of the contract\n    function Election(string _name) {\n        admin = msg.sender;\n        name = _name;\n    }\n\n    // TODO: add modifier prevoting\n    function addCandidate(string _name) requiresAdmin {\n        candidates.push(Candidate({\n            name: _name\n        }));\n        log(\"candidate added\");\n        candidateAdded(_name, candidates.length);\n    }\n\n    function startElection() preVoting {\n        currentStage = Stage.VOTING;\n    }\n\n    function stopElection() voting {\n        currentStage = Stage.PROCESSING;\n    }\n    \n    function vote(string _token, string _vote, uint _candidateId) returns(uint) {\n        if(currentStage != Stage.VOTING) { error(99); return 99; } // WRONG_STAGE\n        if(alreadyVoted(_token)) { error(2); return 2; } // ALREADY_VOTED\n        if(! isTokenValid(_token)) { error(3); return 3; } // INVALID_TOKEN\n\n        // check vote validity\n\n        voters.push(Voter({\n            addr: msg.sender,\n            token: _token,\n            vote: _vote,\n            candidateId: _candidateId\n        }));\n        nrVotes++;\n        voteEvent(_token, nrVotes);\n        return 0;\n    }\n\n/*\n    function getResult() postVoting returns(uint[]) {\n        uint[] memory votes;\n        for(var i=0; i<voters.length; i++) {\n            var candidateIndex = voteToCandidateIndex(i);\n            if(candidateIndex >= 0) {\n                votes[candidateIndex]++;\n            }\n        }\n        return votes;\n    }\n*/\n\n    function publishResult(string _result, string _privateKey) requiresAdmin {\n        result = _result;\n        privateKey = _privateKey;\n\n        resultPublished(_result);\n        currentStage = Stage.RESULT;\n    }\n\n// ############## MODIFIERS ##############\n\nmodifier requiresAdmin {\n    if(msg.sender != admin) throw;\n    _;\n}\n\nmodifier preVoting {\n    if(currentStage != Stage.PRE_VOTING) throw;\n    _;\n}\n\nmodifier voting {\n    if(currentStage != Stage.VOTING) throw;\n    _;\n}\n\n/*\nmodifier postVoting {\n    if(currentStage != Stage.POST_VOTING) throw;\n    _;\n}\n*/\n\n// ############## PRIVATE FUNCTIONS ##############\n\n    function alreadyVoted(string _token) returns(bool) {\n        for(var i=0; i<voters.length; i++) {\n            if(compareStrings(voters[i].token, _token) == 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    // checks if the token is valid and signed by the election registrar\n    // TODO: implement (see https://gist.github.com/axic/5b33912c6f61ae6fd96d6c4a47afde6d)\n    function isTokenValid(string _token) returns (bool) {\n        return true;\n    }\n\n    function voteToCandidateIndex(uint _voterId) returns(uint) {\n        return voters[_voterId].candidateId;\n    }\n\n    // from https://raw.githubusercontent.com/ethereum/dapp-bin/master/library/stringUtils.sol\n    function compareStrings(string _a, string _b) returns (int) {\n        bytes memory a = bytes(_a);\n        bytes memory b = bytes(_b);\n        uint minLength = a.length;\n        if (b.length < minLength) minLength = b.length;\n        //@todo unroll the loop into increments of 32 and do full 32 byte comparisons\n        for (uint i = 0; i < minLength; i ++)\n            if (a[i] < b[i])\n                return -1;\n            else if (a[i] > b[i])\n                return 1;\n        if (a.length < b.length)\n            return -1;\n        else if (a.length > b.length)\n            return 1;\n        else\n            return 0;\n    }\n\n// ############## TESTS ###############\n\n    function testFunc() returns (uint) {\n        return 3;\n    }\n\n    function multiply(uint _n1, uint _n2) returns (uint) {\n        return _n1 * _n2;\n    }\n\n\n    function testEvents() {\n        error(1);\n        log(\"this is a test\");\n    }\n\n    function testEvent2() {\n\n    }\n}\n",
        "language": "Solidity",
        "languageVersion": "0",
        "compilerVersion": "0.4.4+commit.4633f3de.Emscripten.clang",
        "abiDefinition": [
            {
                "constant": false,
                "inputs": [],
                "name": "testFunc",
                "outputs": [
                    {
                        "name": "",
                        "type": "uint256"
                    }
                ],
                "payable": false,
                "type": "function"
            },
            {
                "constant": true,
                "inputs": [],
                "name": "name",
                "outputs": [
                    {
                        "name": "",
                        "type": "string"
                    }
                ],
                "payable": false,
                "type": "function"
            },
            {
                "constant": false,
                "inputs": [],
                "name": "testEvents",
                "outputs": [],
                "payable": false,
                "type": "function"
            },
            {
                "constant": false,
                "inputs": [
                    {
                        "name": "_n1",
                        "type": "uint256"
                    },
                    {
                        "name": "_n2",
                        "type": "uint256"
                    }
                ],
                "name": "multiply",
                "outputs": [
                    {
                        "name": "",
                        "type": "uint256"
                    }
                ],
                "payable": false,
                "type": "function"
            },
            {
                "constant": false,
                "inputs": [],
                "name": "stopElection",
                "outputs": [],
                "payable": false,
                "type": "function"
            },
            {
                "constant": false,
                "inputs": [
                    {
                        "name": "_token",
                        "type": "string"
                    }
                ],
                "name": "isTokenValid",
                "outputs": [
                    {
                        "name": "",
                        "type": "bool"
                    }
                ],
                "payable": false,
                "type": "function"
            },
            {
                "constant": true,
                "inputs": [
                    {
                        "name": "",
                        "type": "uint256"
                    }
                ],
                "name": "candidates",
                "outputs": [
                    {
                        "name": "name",
                        "type": "string"
                    }
                ],
                "payable": false,
                "type": "function"
            },
            {
                "constant": false,
                "inputs": [
                    {
                        "name": "_token",
                        "type": "string"
                    }
                ],
                "name": "alreadyVoted",
                "outputs": [
                    {
                        "name": "",
                        "type": "bool"
                    }
                ],
                "payable": false,
                "type": "function"
            },
            {
                "constant": false,
                "inputs": [
                    {
                        "name": "_name",
                        "type": "string"
                    }
                ],
                "name": "addCandidate",
                "outputs": [],
                "payable": false,
                "type": "function"
            },
            {
                "constant": true,
                "inputs": [],
                "name": "privateKey",
                "outputs": [
                    {
                        "name": "",
                        "type": "string"
                    }
                ],
                "payable": false,
                "type": "function"
            },
            {
                "constant": true,
                "inputs": [],
                "name": "currentStage",
                "outputs": [
                    {
                        "name": "",
                        "type": "uint8"
                    }
                ],
                "payable": false,
                "type": "function"
            },
            {
                "constant": false,
                "inputs": [],
                "name": "startElection",
                "outputs": [],
                "payable": false,
                "type": "function"
            },
            {
                "constant": true,
                "inputs": [],
                "name": "result",
                "outputs": [
                    {
                        "name": "",
                        "type": "string"
                    }
                ],
                "payable": false,
                "type": "function"
            },
            {
                "constant": true,
                "inputs": [],
                "name": "nrVotes",
                "outputs": [
                    {
                        "name": "",
                        "type": "uint256"
                    }
                ],
                "payable": false,
                "type": "function"
            },
            {
                "constant": false,
                "inputs": [
                    {
                        "name": "_token",
                        "type": "string"
                    },
                    {
                        "name": "_vote",
                        "type": "string"
                    },
                    {
                        "name": "_candidateId",
                        "type": "uint256"
                    }
                ],
                "name": "vote",
                "outputs": [
                    {
                        "name": "",
                        "type": "uint256"
                    }
                ],
                "payable": false,
                "type": "function"
            },
            {
                "constant": false,
                "inputs": [
                    {
                        "name": "_result",
                        "type": "string"
                    },
                    {
                        "name": "_privateKey",
                        "type": "string"
                    }
                ],
                "name": "publishResult",
                "outputs": [],
                "payable": false,
                "type": "function"
            },
            {
                "constant": false,
                "inputs": [
                    {
                        "name": "_voterId",
                        "type": "uint256"
                    }
                ],
                "name": "voteToCandidateIndex",
                "outputs": [
                    {
                        "name": "",
                        "type": "uint256"
                    }
                ],
                "payable": false,
                "type": "function"
            },
            {
                "constant": false,
                "inputs": [
                    {
                        "name": "_a",
                        "type": "string"
                    },
                    {
                        "name": "_b",
                        "type": "string"
                    }
                ],
                "name": "compareStrings",
                "outputs": [
                    {
                        "name": "",
                        "type": "int256"
                    }
                ],
                "payable": false,
                "type": "function"
            },
            {
                "constant": false,
                "inputs": [],
                "name": "testEvent2",
                "outputs": [],
                "payable": false,
                "type": "function"
            },
            {
                "constant": true,
                "inputs": [
                    {
                        "name": "",
                        "type": "uint256"
                    }
                ],
                "name": "voters",
                "outputs": [
                    {
                        "name": "addr",
                        "type": "address"
                    },
                    {
                        "name": "token",
                        "type": "string"
                    },
                    {
                        "name": "vote",
                        "type": "string"
                    },
                    {
                        "name": "candidateId",
                        "type": "uint256"
                    }
                ],
                "payable": false,
                "type": "function"
            },
            {
                "constant": true,
                "inputs": [],
                "name": "admin",
                "outputs": [
                    {
                        "name": "",
                        "type": "address"
                    }
                ],
                "payable": false,
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "name": "_name",
                        "type": "string"
                    }
                ],
                "type": "constructor"
            },
            {
                "anonymous": false,
                "inputs": [
                    {
                        "indexed": false,
                        "name": "",
                        "type": "uint256"
                    }
                ],
                "name": "error",
                "type": "event"
            },
            {
                "anonymous": false,
                "inputs": [
                    {
                        "indexed": false,
                        "name": "",
                        "type": "string"
                    }
                ],
                "name": "log",
                "type": "event"
            },
            {
                "anonymous": false,
                "inputs": [
                    {
                        "indexed": false,
                        "name": "",
                        "type": "string"
                    },
                    {
                        "indexed": false,
                        "name": "",
                        "type": "uint256"
                    }
                ],
                "name": "voteEvent",
                "type": "event"
            },
            {
                "anonymous": false,
                "inputs": [
                    {
                        "indexed": false,
                        "name": "",
                        "type": "string"
                    },
                    {
                        "indexed": false,
                        "name": "",
                        "type": "uint256"
                    }
                ],
                "name": "candidateAdded",
                "type": "event"
            },
            {
                "anonymous": false,
                "inputs": [
                    {
                        "indexed": false,
                        "name": "",
                        "type": "string"
                    }
                ],
                "name": "resultPublished",
                "type": "event"
            }
        ],
        "userDoc": {
            "methods": {}
        },
        "developerDoc": {
            "methods": {}
        }
    }
}
}
